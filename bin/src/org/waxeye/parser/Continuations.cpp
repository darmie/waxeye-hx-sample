// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_org_waxeye_parser_AST
#include <org/waxeye/parser/AST.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Continuations
#include <org/waxeye/parser/Continuations.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Exp
#include <org/waxeye/parser/Exp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_85345f505ab4b411_21_new,"org.waxeye.parser.Continuations","new",0x97fc74a0,"org.waxeye.parser.Continuations.new","org/waxeye/parser/Continuations.hx",21,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_36_CONT_SEQ,"org.waxeye.parser.Continuations","CONT_SEQ",0x5f38d332,"org.waxeye.parser.Continuations.CONT_SEQ","org/waxeye/parser/Continuations.hx",36,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_41_CONT_ALT,"org.waxeye.parser.Continuations","CONT_ALT",0x5f2b30bc,"org.waxeye.parser.Continuations.CONT_ALT","org/waxeye/parser/Continuations.hx",41,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_46_CONT_AND,"org.waxeye.parser.Continuations","CONT_AND",0x5f2b326a,"org.waxeye.parser.Continuations.CONT_AND","org/waxeye/parser/Continuations.hx",46,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_51_CONT_NOT,"org.waxeye.parser.Continuations","CONT_NOT",0x5f3510a6,"org.waxeye.parser.Continuations.CONT_NOT","org/waxeye/parser/Continuations.hx",51,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_56_CONT_OPT,"org.waxeye.parser.Continuations","CONT_OPT",0x5f35d3c6,"org.waxeye.parser.Continuations.CONT_OPT","org/waxeye/parser/Continuations.hx",56,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_61_CONT_STAR,"org.waxeye.parser.Continuations","CONT_STAR",0xf28b4cbf,"org.waxeye.parser.Continuations.CONT_STAR","org/waxeye/parser/Continuations.hx",61,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_66_CONT_PLUS,"org.waxeye.parser.Continuations","CONT_PLUS",0xf089a847,"org.waxeye.parser.Continuations.CONT_PLUS","org/waxeye/parser/Continuations.hx",66,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_71_CONT_VOID,"org.waxeye.parser.Continuations","CONT_VOID",0xf4832c41,"org.waxeye.parser.Continuations.CONT_VOID","org/waxeye/parser/Continuations.hx",71,0x1d92a2b1)
HX_LOCAL_STACK_FRAME(_hx_pos_85345f505ab4b411_76_CONT_NT,"org.waxeye.parser.Continuations","CONT_NT",0xb5cedff3,"org.waxeye.parser.Continuations.CONT_NT","org/waxeye/parser/Continuations.hx",76,0x1d92a2b1)
namespace org{
namespace waxeye{
namespace parser{

void Continuations_obj::__construct(::String type,int pos,::Array< ::Dynamic> expressions, ::org::waxeye::parser::Exp expression,::Array< ::Dynamic> asts, ::Dynamic err,::String mode,::String name, ::Dynamic nt){
            	HX_STACKFRAME(&_hx_pos_85345f505ab4b411_21_new)
HXLINE(  22)		this->type = type;
HXLINE(  23)		this->pos = pos;
HXLINE(  24)		this->expressions = expressions;
HXLINE(  25)		this->expression = expression;
HXLINE(  26)		this->asts = asts;
HXLINE(  27)		this->err = err;
HXLINE(  28)		this->mode = mode;
HXLINE(  29)		this->name = name;
HXLINE(  30)		this->nt = nt;
            	}

Dynamic Continuations_obj::__CreateEmpty() { return new Continuations_obj; }

void *Continuations_obj::_hx_vtable = 0;

Dynamic Continuations_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Continuations_obj > _hx_result = new Continuations_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool Continuations_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x11eefca2;
}

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_SEQ(::Array< ::Dynamic> expressions){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_36_CONT_SEQ)
HXDLIN(  36)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_SEQ",72,df,dc,99),(int)0,expressions,null(),null(),null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Continuations_obj,CONT_SEQ,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_ALT(::Array< ::Dynamic> expressions,int pos,::Array< ::Dynamic> asts){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_41_CONT_ALT)
HXDLIN(  41)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_ALT",fc,3c,cf,99),pos,expressions,null(),asts,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Continuations_obj,CONT_ALT,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_AND(int pos,::Array< ::Dynamic> asts, ::Dynamic err){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_46_CONT_AND)
HXDLIN(  46)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_AND",aa,3e,cf,99),pos,null(),null(),asts,err,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Continuations_obj,CONT_AND,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_NOT(int pos,::Array< ::Dynamic> asts, ::Dynamic err){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_51_CONT_NOT)
HXDLIN(  51)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_NOT",e6,1c,d9,99),pos,null(),null(),asts,err,null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Continuations_obj,CONT_NOT,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_OPT(int pos,::Array< ::Dynamic> asts){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_56_CONT_OPT)
HXDLIN(  56)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_OPT",06,e0,d9,99),pos,null(),null(),asts,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Continuations_obj,CONT_OPT,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_STAR( ::Dynamic exp,int pos,::Array< ::Dynamic> asts){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_61_CONT_STAR)
HXDLIN(  61)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_STAR",7f,f8,71,07),pos,null(),exp,asts,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(Continuations_obj,CONT_STAR,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_PLUS( ::Dynamic exp){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_66_CONT_PLUS)
HXDLIN(  66)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_PLUS",07,54,70,05),(int)0,null(),exp,null(),null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Continuations_obj,CONT_PLUS,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_VOID(::Array< ::Dynamic> asts){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_71_CONT_VOID)
HXDLIN(  71)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_VOID",01,d8,69,09),(int)0,null(),null(),asts,null(),null(),null(),null());
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Continuations_obj,CONT_VOID,return )

 ::org::waxeye::parser::Continuations Continuations_obj::CONT_NT(::String mode,::String name,::Array< ::Dynamic> asts, ::Dynamic nt){
            	HX_GC_STACKFRAME(&_hx_pos_85345f505ab4b411_76_CONT_NT)
HXDLIN(  76)		return  ::org::waxeye::parser::Continuations_obj::__alloc( HX_CTX ,HX_("CONT_NT",b3,1b,5f,99),(int)0,null(),null(),asts,null(),mode,name,nt);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC4(Continuations_obj,CONT_NT,return )


hx::ObjectPtr< Continuations_obj > Continuations_obj::__new(::String type,int pos,::Array< ::Dynamic> expressions, ::org::waxeye::parser::Exp expression,::Array< ::Dynamic> asts, ::Dynamic err,::String mode,::String name, ::Dynamic nt) {
	hx::ObjectPtr< Continuations_obj > __this = new Continuations_obj();
	__this->__construct(type,pos,expressions,expression,asts,err,mode,name,nt);
	return __this;
}

hx::ObjectPtr< Continuations_obj > Continuations_obj::__alloc(hx::Ctx *_hx_ctx,::String type,int pos,::Array< ::Dynamic> expressions, ::org::waxeye::parser::Exp expression,::Array< ::Dynamic> asts, ::Dynamic err,::String mode,::String name, ::Dynamic nt) {
	Continuations_obj *__this = (Continuations_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Continuations_obj), true, "org.waxeye.parser.Continuations"));
	*(void **)__this = Continuations_obj::_hx_vtable;
	__this->__construct(type,pos,expressions,expression,asts,err,mode,name,nt);
	return __this;
}

Continuations_obj::Continuations_obj()
{
}

void Continuations_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Continuations);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(expressions,"expressions");
	HX_MARK_MEMBER_NAME(expression,"expression");
	HX_MARK_MEMBER_NAME(asts,"asts");
	HX_MARK_MEMBER_NAME(err,"err");
	HX_MARK_MEMBER_NAME(mode,"mode");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(nt,"nt");
	HX_MARK_END_CLASS();
}

void Continuations_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(expressions,"expressions");
	HX_VISIT_MEMBER_NAME(expression,"expression");
	HX_VISIT_MEMBER_NAME(asts,"asts");
	HX_VISIT_MEMBER_NAME(err,"err");
	HX_VISIT_MEMBER_NAME(mode,"mode");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(nt,"nt");
}

hx::Val Continuations_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nt") ) { return hx::Val( nt ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { return hx::Val( pos ); }
		if (HX_FIELD_EQ(inName,"err") ) { return hx::Val( err ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"asts") ) { return hx::Val( asts ); }
		if (HX_FIELD_EQ(inName,"mode") ) { return hx::Val( mode ); }
		if (HX_FIELD_EQ(inName,"name") ) { return hx::Val( name ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"expression") ) { return hx::Val( expression ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"expressions") ) { return hx::Val( expressions ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Continuations_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"CONT_NT") ) { outValue = CONT_NT_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"CONT_SEQ") ) { outValue = CONT_SEQ_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CONT_ALT") ) { outValue = CONT_ALT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CONT_AND") ) { outValue = CONT_AND_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CONT_NOT") ) { outValue = CONT_NOT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CONT_OPT") ) { outValue = CONT_OPT_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"CONT_STAR") ) { outValue = CONT_STAR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CONT_PLUS") ) { outValue = CONT_PLUS_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CONT_VOID") ) { outValue = CONT_VOID_dyn(); return true; }
	}
	return false;
}

hx::Val Continuations_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nt") ) { nt=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"err") ) { err=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"asts") ) { asts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mode") ) { mode=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"expression") ) { expression=inValue.Cast<  ::org::waxeye::parser::Exp >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"expressions") ) { expressions=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Continuations_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"));
	outFields->push(HX_HCSTRING("expressions","\xdb","\x53","\x90","\x9c"));
	outFields->push(HX_HCSTRING("expression","\x98","\x11","\x9f","\x2e"));
	outFields->push(HX_HCSTRING("asts","\xf1","\x5a","\x75","\x40"));
	outFields->push(HX_HCSTRING("err","\x65","\x07","\x4d","\x00"));
	outFields->push(HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"));
	outFields->push(HX_HCSTRING("name","\x4b","\x72","\xff","\x48"));
	outFields->push(HX_HCSTRING("nt","\x46","\x60","\x00","\x00"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Continuations_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Continuations_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsInt,(int)offsetof(Continuations_obj,pos),HX_HCSTRING("pos","\x94","\x5d","\x55","\x00")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Continuations_obj,expressions),HX_HCSTRING("expressions","\xdb","\x53","\x90","\x9c")},
	{hx::fsObject /*::org::waxeye::parser::Exp*/ ,(int)offsetof(Continuations_obj,expression),HX_HCSTRING("expression","\x98","\x11","\x9f","\x2e")},
	{hx::fsObject /*Array< ::Dynamic >*/ ,(int)offsetof(Continuations_obj,asts),HX_HCSTRING("asts","\xf1","\x5a","\x75","\x40")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Continuations_obj,err),HX_HCSTRING("err","\x65","\x07","\x4d","\x00")},
	{hx::fsString,(int)offsetof(Continuations_obj,mode),HX_HCSTRING("mode","\x63","\xd3","\x60","\x48")},
	{hx::fsString,(int)offsetof(Continuations_obj,name),HX_HCSTRING("name","\x4b","\x72","\xff","\x48")},
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Continuations_obj,nt),HX_HCSTRING("nt","\x46","\x60","\x00","\x00")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Continuations_obj_sStaticStorageInfo = 0;
#endif

static ::String Continuations_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("pos","\x94","\x5d","\x55","\x00"),
	HX_HCSTRING("expressions","\xdb","\x53","\x90","\x9c"),
	HX_HCSTRING("expression","\x98","\x11","\x9f","\x2e"),
	HX_HCSTRING("asts","\xf1","\x5a","\x75","\x40"),
	HX_HCSTRING("err","\x65","\x07","\x4d","\x00"),
	HX_HCSTRING("mode","\x63","\xd3","\x60","\x48"),
	HX_HCSTRING("name","\x4b","\x72","\xff","\x48"),
	HX_HCSTRING("nt","\x46","\x60","\x00","\x00"),
	::String(null()) };

static void Continuations_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Continuations_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Continuations_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Continuations_obj::__mClass,"__mClass");
};

#endif

hx::Class Continuations_obj::__mClass;

static ::String Continuations_obj_sStaticFields[] = {
	HX_HCSTRING("CONT_SEQ","\x72","\xdf","\xdc","\x99"),
	HX_HCSTRING("CONT_ALT","\xfc","\x3c","\xcf","\x99"),
	HX_HCSTRING("CONT_AND","\xaa","\x3e","\xcf","\x99"),
	HX_HCSTRING("CONT_NOT","\xe6","\x1c","\xd9","\x99"),
	HX_HCSTRING("CONT_OPT","\x06","\xe0","\xd9","\x99"),
	HX_HCSTRING("CONT_STAR","\x7f","\xf8","\x71","\x07"),
	HX_HCSTRING("CONT_PLUS","\x07","\x54","\x70","\x05"),
	HX_HCSTRING("CONT_VOID","\x01","\xd8","\x69","\x09"),
	HX_HCSTRING("CONT_NT","\xb3","\x1b","\x5f","\x99"),
	::String(null())
};

void Continuations_obj::__register()
{
	hx::Object *dummy = new Continuations_obj;
	Continuations_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("org.waxeye.parser.Continuations","\xae","\xe4","\xc5","\xa6");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Continuations_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Continuations_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Continuations_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Continuations_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Continuations_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Continuations_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Continuations_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Continuations_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace waxeye
} // end namespace parser
