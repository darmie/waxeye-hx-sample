// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_org_waxeye_parser_Exp
#include <org/waxeye/parser/Exp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1efd3e7df700425c_31_new,"org.waxeye.parser.Exp","new",0xdf29f661,"org.waxeye.parser.Exp.new","org/waxeye/parser/Exp.hx",31,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_39_ANY,"org.waxeye.parser.Exp","ANY",0xdf07bccd,"org.waxeye.parser.Exp.ANY","org/waxeye/parser/Exp.hx",39,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_44_NT,"org.waxeye.parser.Exp","NT",0x36f49965,"org.waxeye.parser.Exp.NT","org/waxeye/parser/Exp.hx",44,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_49_VOID,"org.waxeye.parser.Exp","VOID",0x559fa633,"org.waxeye.parser.Exp.VOID","org/waxeye/parser/Exp.hx",49,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_54_CHAR,"org.waxeye.parser.Exp","CHAR",0x490b41b5,"org.waxeye.parser.Exp.CHAR","org/waxeye/parser/Exp.hx",54,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_59_CHAR_CLASS,"org.waxeye.parser.Exp","CHAR_CLASS",0x3f4ceece,"org.waxeye.parser.Exp.CHAR_CLASS","org/waxeye/parser/Exp.hx",59,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_64_AND,"org.waxeye.parser.Exp","AND",0xdf07bcb8,"org.waxeye.parser.Exp.AND","org/waxeye/parser/Exp.hx",64,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_69_NOT,"org.waxeye.parser.Exp","NOT",0xdf119af4,"org.waxeye.parser.Exp.NOT","org/waxeye/parser/Exp.hx",69,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_74_OPT,"org.waxeye.parser.Exp","OPT",0xdf125e14,"org.waxeye.parser.Exp.OPT","org/waxeye/parser/Exp.hx",74,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_79_ALT,"org.waxeye.parser.Exp","ALT",0xdf07bb0a,"org.waxeye.parser.Exp.ALT","org/waxeye/parser/Exp.hx",79,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_84_SEQ,"org.waxeye.parser.Exp","SEQ",0xdf155d80,"org.waxeye.parser.Exp.SEQ","org/waxeye/parser/Exp.hx",84,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_89_STAR,"org.waxeye.parser.Exp","STAR",0x53a7c6b1,"org.waxeye.parser.Exp.STAR","org/waxeye/parser/Exp.hx",89,0x54e2e0d0)
HX_LOCAL_STACK_FRAME(_hx_pos_1efd3e7df700425c_94_PLUS,"org.waxeye.parser.Exp","PLUS",0x51a62239,"org.waxeye.parser.Exp.PLUS","org/waxeye/parser/Exp.hx",94,0x54e2e0d0)
namespace org{
namespace waxeye{
namespace parser{

void Exp_obj::__construct(::String type,::cpp::VirtualArray args){
            	HX_STACKFRAME(&_hx_pos_1efd3e7df700425c_31_new)
HXLINE(  32)		this->args = args;
HXLINE(  33)		this->type = type;
            	}

Dynamic Exp_obj::__CreateEmpty() { return new Exp_obj; }

void *Exp_obj::_hx_vtable = 0;

Dynamic Exp_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Exp_obj > _hx_result = new Exp_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Exp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50cd6bb7;
}

 ::org::waxeye::parser::Exp Exp_obj::ANY(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_39_ANY)
HXDLIN(  39)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("ANY",cc,96,31,00),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,ANY,return )

 ::org::waxeye::parser::Exp Exp_obj::NT(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_44_NT)
HXDLIN(  44)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("NT",46,44,00,00),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,NT,return )

 ::org::waxeye::parser::Exp Exp_obj::VOID(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_49_VOID)
HXDLIN(  49)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("VOID",54,8b,14,39),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,VOID,return )

 ::org::waxeye::parser::Exp Exp_obj::CHAR(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_54_CHAR)
HXDLIN(  54)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("CHAR",d6,26,80,2c),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,CHAR,return )

 ::org::waxeye::parser::Exp Exp_obj::CHAR_CLASS(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_59_CHAR_CLASS)
HXDLIN(  59)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("CHAR_CLASS",af,e2,3f,41),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,CHAR_CLASS,return )

 ::org::waxeye::parser::Exp Exp_obj::AND(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_64_AND)
HXDLIN(  64)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("AND",b7,96,31,00),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,AND,return )

 ::org::waxeye::parser::Exp Exp_obj::NOT(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_69_NOT)
HXDLIN(  69)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("NOT",f3,74,3b,00),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,NOT,return )

 ::org::waxeye::parser::Exp Exp_obj::OPT(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_74_OPT)
HXDLIN(  74)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("OPT",13,38,3c,00),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,OPT,return )

 ::org::waxeye::parser::Exp Exp_obj::ALT(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_79_ALT)
HXDLIN(  79)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("ALT",09,95,31,00),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,ALT,return )

 ::org::waxeye::parser::Exp Exp_obj::SEQ(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_84_SEQ)
HXDLIN(  84)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("SEQ",7f,37,3f,00),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,SEQ,return )

 ::org::waxeye::parser::Exp Exp_obj::STAR(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_89_STAR)
HXDLIN(  89)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("STAR",d2,ab,1c,37),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,STAR,return )

 ::org::waxeye::parser::Exp Exp_obj::PLUS(::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_1efd3e7df700425c_94_PLUS)
HXDLIN(  94)		return  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,HX_("PLUS",5a,07,1b,35),args);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Exp_obj,PLUS,return )


Exp_obj::Exp_obj()
{
}

void Exp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Exp);
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(args,"args");
	HX_MARK_END_CLASS();
}

void Exp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(args,"args");
}

hx::Val Exp_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"args") ) { return hx::Val( args ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Exp_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"NT") ) { outValue = NT_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"ANY") ) { outValue = ANY_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"AND") ) { outValue = AND_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"NOT") ) { outValue = NOT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"OPT") ) { outValue = OPT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ALT") ) { outValue = ALT_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"SEQ") ) { outValue = SEQ_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"VOID") ) { outValue = VOID_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"CHAR") ) { outValue = CHAR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"STAR") ) { outValue = STAR_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"PLUS") ) { outValue = PLUS_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"CHAR_CLASS") ) { outValue = CHAR_CLASS_dyn(); return true; }
	}
	return false;
}

hx::Val Exp_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"args") ) { args=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Exp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"));
	outFields->push(HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Exp_obj_sMemberStorageInfo[] = {
	{hx::fsString,(int)offsetof(Exp_obj,type),HX_HCSTRING("type","\xba","\xf2","\x08","\x4d")},
	{hx::fsObject /*cpp::ArrayBase*/ ,(int)offsetof(Exp_obj,args),HX_HCSTRING("args","\x5d","\x8d","\x74","\x40")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Exp_obj_sStaticStorageInfo = 0;
#endif

static ::String Exp_obj_sMemberFields[] = {
	HX_HCSTRING("type","\xba","\xf2","\x08","\x4d"),
	HX_HCSTRING("args","\x5d","\x8d","\x74","\x40"),
	::String(null()) };

static void Exp_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Exp_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Exp_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Exp_obj::__mClass,"__mClass");
};

#endif

hx::Class Exp_obj::__mClass;

static ::String Exp_obj_sStaticFields[] = {
	HX_HCSTRING("ANY","\xcc","\x96","\x31","\x00"),
	HX_HCSTRING("NT","\x46","\x44","\x00","\x00"),
	HX_HCSTRING("VOID","\x54","\x8b","\x14","\x39"),
	HX_HCSTRING("CHAR","\xd6","\x26","\x80","\x2c"),
	HX_HCSTRING("CHAR_CLASS","\xaf","\xe2","\x3f","\x41"),
	HX_HCSTRING("AND","\xb7","\x96","\x31","\x00"),
	HX_HCSTRING("NOT","\xf3","\x74","\x3b","\x00"),
	HX_HCSTRING("OPT","\x13","\x38","\x3c","\x00"),
	HX_HCSTRING("ALT","\x09","\x95","\x31","\x00"),
	HX_HCSTRING("SEQ","\x7f","\x37","\x3f","\x00"),
	HX_HCSTRING("STAR","\xd2","\xab","\x1c","\x37"),
	HX_HCSTRING("PLUS","\x5a","\x07","\x1b","\x35"),
	::String(null())
};

void Exp_obj::__register()
{
	hx::Object *dummy = new Exp_obj;
	Exp_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("org.waxeye.parser.Exp","\xef","\x31","\xbd","\xde");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Exp_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Exp_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Exp_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Exp_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Exp_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Exp_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Exp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Exp_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace waxeye
} // end namespace parser
