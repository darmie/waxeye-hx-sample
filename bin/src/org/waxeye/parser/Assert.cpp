// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_org_waxeye_parser_Assert
#include <org/waxeye/parser/Assert.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_96c3a95d7cae3986_128_new,"org.waxeye.parser.Assert","new",0xa267cba6,"org.waxeye.parser.Assert.new","org/waxeye/parser/Util.hx",128,0x128cea8d)
HX_LOCAL_STACK_FRAME(_hx_pos_96c3a95d7cae3986_133_ok,"org.waxeye.parser.Assert","ok",0xde49f096,"org.waxeye.parser.Assert.ok","org/waxeye/parser/Util.hx",133,0x128cea8d)
namespace org{
namespace waxeye{
namespace parser{

void Assert_obj::__construct(bool val){
            	HX_STACKFRAME(&_hx_pos_96c3a95d7cae3986_128_new)
HXDLIN( 128)		::org::waxeye::parser::Assert_obj::ok(val);
            	}

Dynamic Assert_obj::__CreateEmpty() { return new Assert_obj; }

void *Assert_obj::_hx_vtable = 0;

Dynamic Assert_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Assert_obj > _hx_result = new Assert_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Assert_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x27f7d3ec;
}

void Assert_obj::ok(bool val){
            	HX_STACKFRAME(&_hx_pos_96c3a95d7cae3986_133_ok)
HXDLIN( 133)		if ((val == false)) {
HXLINE( 136)			HX_STACK_DO_THROW(HX_("assertion error",ea,9b,ae,20));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Assert_obj,ok,(void))


Assert_obj::Assert_obj()
{
}

bool Assert_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ok") ) { outValue = ok_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *Assert_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *Assert_obj_sStaticStorageInfo = 0;
#endif

static void Assert_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Assert_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Assert_obj::__mClass,"__mClass");
};

#endif

hx::Class Assert_obj::__mClass;

static ::String Assert_obj_sStaticFields[] = {
	HX_HCSTRING("ok","\x1c","\x61","\x00","\x00"),
	::String(null())
};

void Assert_obj::__register()
{
	hx::Object *dummy = new Assert_obj;
	Assert_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("org.waxeye.parser.Assert","\xb4","\xc0","\xab","\xbe");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Assert_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Assert_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Assert_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Assert_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Assert_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Assert_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Assert_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace waxeye
} // end namespace parser
