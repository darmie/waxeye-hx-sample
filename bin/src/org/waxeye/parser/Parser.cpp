// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
#include <hxcpp.h>

#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_AST
#include <org/waxeye/parser/AST.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Assert
#include <org/waxeye/parser/Assert.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Continuations
#include <org/waxeye/parser/Continuations.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_ErrAny
#include <org/waxeye/parser/ErrAny.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_ErrCC
#include <org/waxeye/parser/ErrCC.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_ErrChar
#include <org/waxeye/parser/ErrChar.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Exp
#include <org/waxeye/parser/Exp.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_MachineConfiguration
#include <org/waxeye/parser/MachineConfiguration.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_MachineState
#include <org/waxeye/parser/MachineState.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_ParseError
#include <org/waxeye/parser/ParseError.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Parser
#include <org/waxeye/parser/Parser.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_RawError
#include <org/waxeye/parser/RawError.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Util
#include <org/waxeye/parser/Util.h>
#endif
#ifndef INCLUDED_org_waxeye_parser_Value
#include <org/waxeye/parser/Value.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5b080e019e7c5b0a_23_new,"org.waxeye.parser.Parser","new",0xc554a23f,"org.waxeye.parser.Parser.new","org/waxeye/parser/Parser.hx",23,0x163fd410)
HX_LOCAL_STACK_FRAME(_hx_pos_5b080e019e7c5b0a_36_match,"org.waxeye.parser.Parser","match",0xa76390e4,"org.waxeye.parser.Parser.match","org/waxeye/parser/Parser.hx",36,0x163fd410)
HX_LOCAL_STACK_FRAME(_hx_pos_5b080e019e7c5b0a_58_eof,"org.waxeye.parser.Parser","eof",0xc54dd69b,"org.waxeye.parser.Parser.eof","org/waxeye/parser/Parser.hx",58,0x163fd410)
HX_LOCAL_STACK_FRAME(_hx_pos_5b080e019e7c5b0a_63_move,"org.waxeye.parser.Parser","move",0xe417b452,"org.waxeye.parser.Parser.move","org/waxeye/parser/Parser.hx",63,0x163fd410)
static const ::String _hx_array_data_603116cd_8[] = {
	HX_("CONT_ALT",fc,3c,cf,99),
};
static const ::String _hx_array_data_603116cd_9[] = {
	HX_("CONT_SEQ",72,df,dc,99),HX_("CONT_VOID",01,d8,69,09),HX_("CONT_PLUS",07,54,70,05),
};
static const ::String _hx_array_data_603116cd_10[] = {
	HX_("CONT_AND",aa,3e,cf,99),
};
static const ::String _hx_array_data_603116cd_11[] = {
	HX_("CONT_NOT",e6,1c,d9,99),
};
static const ::String _hx_array_data_603116cd_12[] = {
	HX_("CONT_STAR",7f,f8,71,07),HX_("CONT_OPT",06,e0,d9,99),
};
static const ::String _hx_array_data_603116cd_13[] = {
	HX_("CONT_NT",b3,1b,5f,99),
};
HX_LOCAL_STACK_FRAME(_hx_pos_5b080e019e7c5b0a_422_visit,"org.waxeye.parser.Parser","visit",0xdb47c16a,"org.waxeye.parser.Parser.visit","org/waxeye/parser/Parser.hx",422,0x163fd410)
HX_LOCAL_STACK_FRAME(_hx_pos_5b080e019e7c5b0a_454_parse,"org.waxeye.parser.Parser","parse",0x6195d7d2,"org.waxeye.parser.Parser.parse","org/waxeye/parser/Parser.hx",454,0x163fd410)
namespace org{
namespace waxeye{
namespace parser{

void Parser_obj::__construct( ::Dynamic env,::String __o_start){
::String start = __o_start.Default(HX_HCSTRING("","\x00","\x00","\x00","\x00"));
            	HX_STACKFRAME(&_hx_pos_5b080e019e7c5b0a_23_new)
HXLINE(  25)		if (hx::IsNull( env )) {
HXLINE(  27)			HX_STACK_DO_THROW(HX_("Please supply grammar definition.",a7,08,ad,67));
            		}
HXLINE(  30)		this->env = env;
HXLINE(  32)		this->start = start;
            	}

Dynamic Parser_obj::__CreateEmpty() { return new Parser_obj; }

void *Parser_obj::_hx_vtable = 0;

Dynamic Parser_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Parser_obj > _hx_result = new Parser_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Parser_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3932f421;
}

 ::Dynamic Parser_obj::match(::String nt,::String input){
            	HX_GC_STACKFRAME(&_hx_pos_5b080e019e7c5b0a_36_match)
HXLINE(  37)		this->input = input;
HXLINE(  38)		this->nt = nt;
HXLINE(  39)		this->inputLen = input.length;
HXLINE(  42)		 ::Dynamic _hx_tmp =  ::Dynamic(::Reflect_obj::field(this->env,nt)->__Field(HX_("exp",9d,0c,4d,00),hx::paccDynamic));
HXDLIN(  42)		this->move(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(_hx_tmp) ),(int)0,::Array_obj< ::Dynamic>::__new(0), ::org::waxeye::parser::RawError_obj::__alloc( HX_CTX ,(int)0,::cpp::VirtualArray_obj::__new(1)->init(0,nt),::cpp::VirtualArray_obj::__new(0),nt),::Array_obj< ::Dynamic>::__new(0)));
HXLINE(  43)		if (hx::IsNotNull( this->state )) {
HXLINE(  45)			while((this->state->type != HX_("FINAL",56,97,88,7e))){
HXLINE(  47)				this->move(this->state->configuration);
            			}
            		}
HXLINE(  50)		return this->state->result;
            	}


HX_DEFINE_DYNAMIC_FUNC2(Parser_obj,match,return )

bool Parser_obj::eof(int pos){
            	HX_STACKFRAME(&_hx_pos_5b080e019e7c5b0a_58_eof)
HXDLIN(  58)		return (pos >= this->inputLen);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,eof,return )

void Parser_obj::move( ::org::waxeye::parser::MachineConfiguration conf){
            	HX_GC_STACKFRAME(&_hx_pos_5b080e019e7c5b0a_63_move)
HXLINE(  65)		::Array< ::Dynamic> asts = ::Array_obj< ::Dynamic>::__new();
HXLINE(  66)		if (hx::IsNull( conf->asts )) {
HXLINE(  68)			asts = ::Array_obj< ::Dynamic>::__new(0);
            		}
            		else {
HXLINE(  71)			asts = conf->asts;
            		}
HXLINE(  73)		int pos = conf->pos;
HXLINE(  74)		 ::org::waxeye::parser::Exp exp = conf->exp;
HXLINE(  75)		 ::Dynamic err = conf->err;
HXLINE(  79)		::Array< ::Dynamic> k = conf->continuations;
HXLINE(  80)		 ::org::waxeye::parser::Exp firstExp =  ::org::waxeye::parser::Exp_obj::__alloc( HX_CTX ,null(),::cpp::VirtualArray_obj::__new(0));
HXLINE(  81)		::Array< ::Dynamic> restExp = ::Array_obj< ::Dynamic>::__new();
HXLINE(  82)		::cpp::VirtualArray es = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  84)		 ::Dynamic kFirst = ::org::waxeye::parser::Util_obj::first(k);
HXLINE(  85)		 ::Dynamic kRest = ::org::waxeye::parser::Util_obj::rest(k);
HXLINE(  86)		if (hx::IsNotNull( kFirst )) {
HXLINE(  87)			es = ( (::cpp::VirtualArray)(kFirst->__Field(HX_("expressions",db,53,90,9c),hx::paccDynamic)) );
            		}
HXLINE(  89)		if (hx::IsNotNull( es )) {
HXLINE(  91)			firstExp = ( ( ::org::waxeye::parser::Exp)(::org::waxeye::parser::Util_obj::first(es)) );
HXLINE(  92)			restExp = ( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::rest(es)) );
            		}
HXLINE(  96)		{
HXLINE(  96)			::String _g = conf->type;
HXDLIN(  96)			::String _hx_switch_0 = _g;
            			if (  (_hx_switch_0==HX_("APPLY",4e,bd,29,a2)) ){
HXLINE( 215)				bool _hx_tmp;
HXDLIN( 215)				bool _hx_tmp1;
HXDLIN( 215)				if (hx::IsNotNull( conf->value )) {
HXLINE( 215)					_hx_tmp1 = (conf->value->type == HX_("FAIL",de,81,76,2e));
            				}
            				else {
HXLINE( 215)					_hx_tmp1 = false;
            				}
HXDLIN( 215)				if (_hx_tmp1) {
HXLINE( 215)					if (hx::IsNotNull( kFirst )) {
HXLINE( 215)						_hx_tmp = (::Array_obj< ::String >::fromData( _hx_array_data_603116cd_8,1)->indexOf( ::Dynamic(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),null()) == (int)-1);
            					}
            					else {
HXLINE( 215)						_hx_tmp = false;
            					}
            				}
            				else {
HXLINE( 215)					_hx_tmp = false;
            				}
HXDLIN( 215)				if (_hx_tmp) {
HXLINE( 217)					if ((::Array_obj< ::String >::fromData( _hx_array_data_603116cd_9,3)->indexOf( ::Dynamic(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),null()) != (int)-1)) {
HXLINE( 219)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),conf->value));
            					}
            					else {
HXLINE( 222)						if ((::Array_obj< ::String >::fromData( _hx_array_data_603116cd_10,1)->indexOf( ::Dynamic(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),null()) != (int)-1)) {
HXLINE( 224)							this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::FAIL( ::Dynamic(kFirst->__Field(HX_("err",65,07,4d,00),hx::paccDynamic)))));
            						}
            						else {
HXLINE( 227)							if ((::Array_obj< ::String >::fromData( _hx_array_data_603116cd_11,1)->indexOf( ::Dynamic(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),null()) != (int)-1)) {
HXLINE( 229)								int kFirst1 = ( (int)(kFirst->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 229)								::Array< ::Dynamic> kFirst2 = ( (::Array< ::Dynamic>)(kFirst->__Field(HX_("asts",f1,5a,75,40),hx::paccDynamic)) );
HXDLIN( 229)								this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(kFirst1,kFirst2,conf->value->err)));
            							}
            							else {
HXLINE( 232)								if ((::Array_obj< ::String >::fromData( _hx_array_data_603116cd_12,2)->indexOf( ::Dynamic(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),null()) != (int)-1)) {
HXLINE( 234)									int kFirst3 = ( (int)(kFirst->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 234)									::Array< ::Dynamic> kFirst4 = ( (::Array< ::Dynamic>)(kFirst->__Field(HX_("asts",f1,5a,75,40),hx::paccDynamic)) );
HXDLIN( 234)									this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(kFirst3,kFirst4,conf->value->err)));
            								}
            								else {
HXLINE( 237)									if ((::Array_obj< ::String >::fromData( _hx_array_data_603116cd_13,1)->indexOf( ::Dynamic(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)),null()) != (int)-1)) {
HXLINE( 239)										err = conf->value->err;
HXLINE( 240)										this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::FAIL( ::org::waxeye::parser::RawError_obj::__alloc( HX_CTX , ::Dynamic(err->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("nonterminals",ca,48,83,be),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("failedChars",e0,59,ab,17),hx::paccDynamic)), ::Dynamic(kFirst->__Field(HX_("nt",46,60,00,00),hx::paccDynamic))))));
            									}
            									else {
HXLINE( 245)										this->state = ::org::waxeye::parser::MachineState_obj::FINAL(hx::TCast<  ::org::waxeye::parser::RawError >::cast(conf->value->err)->toParseError(this->input));
            									}
            								}
            							}
            						}
            					}
            				}
            				else {
HXLINE( 249)					bool _hx_tmp2;
HXDLIN( 249)					if (hx::IsNotNull( kFirst )) {
HXLINE( 249)						_hx_tmp2 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_SEQ",72,df,dc,99));
            					}
            					else {
HXLINE( 249)						_hx_tmp2 = false;
            					}
HXDLIN( 249)					if (_hx_tmp2) {
HXLINE( 251)						if ((es->get_length() > (int)0)) {
HXLINE( 253)							int conf1 = conf->value->pos;
HXDLIN( 253)							::Array< ::Dynamic> conf2 = conf->value->asts;
HXDLIN( 253)							 ::org::waxeye::parser::RawError _hx_tmp3 = hx::TCast<  ::org::waxeye::parser::RawError >::cast(conf->value->err);
HXDLIN( 253)							this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(firstExp,conf1,conf2,_hx_tmp3,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_SEQ(restExp),kRest)) )));
            						}
            						else {
HXLINE( 258)							this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),conf->value));
            						}
            					}
            					else {
HXLINE( 266)						bool _hx_tmp4;
HXDLIN( 266)						if (hx::IsNotNull( kFirst )) {
HXLINE( 266)							if ((( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) != HX_("CONT_STAR",7f,f8,71,07))) {
HXLINE( 266)								_hx_tmp4 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_PLUS",07,54,70,05));
            							}
            							else {
HXLINE( 266)								_hx_tmp4 = true;
            							}
            						}
            						else {
HXLINE( 266)							_hx_tmp4 = false;
            						}
HXDLIN( 266)						if (_hx_tmp4) {
HXLINE( 268)							::org::waxeye::parser::Assert_obj::ok(::Std_obj::is(conf->value,hx::ClassOf< ::org::waxeye::parser::Value >()));
HXLINE( 269)							 ::org::waxeye::parser::Exp kFirst5 = ( ( ::org::waxeye::parser::Exp)(kFirst->__Field(HX_("expression",98,11,9f,2e),hx::paccDynamic)) );
HXDLIN( 269)							int conf3 = conf->value->pos;
HXDLIN( 269)							::Array< ::Dynamic> conf4 = conf->value->asts;
HXDLIN( 269)							 ::org::waxeye::parser::RawError _hx_tmp5 = hx::TCast<  ::org::waxeye::parser::RawError >::cast(conf->value->err);
HXDLIN( 269)							this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(kFirst5,conf3,conf4,_hx_tmp5,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_STAR( ::Dynamic(kFirst->__Field(HX_("expression",98,11,9f,2e),hx::paccDynamic)),conf->value->pos,conf->value->asts),kRest)) )));
            						}
            						else {
HXLINE( 272)							bool _hx_tmp6;
HXDLIN( 272)							if (hx::IsNotNull( kFirst )) {
HXLINE( 272)								_hx_tmp6 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_VOID",01,d8,69,09));
            							}
            							else {
HXLINE( 272)								_hx_tmp6 = false;
            							}
HXDLIN( 272)							if (_hx_tmp6) {
HXLINE( 274)								int conf5 = conf->value->pos;
HXDLIN( 274)								::Array< ::Dynamic> kFirst6 = ( (::Array< ::Dynamic>)(kFirst->__Field(HX_("asts",f1,5a,75,40),hx::paccDynamic)) );
HXDLIN( 274)								this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(conf5,kFirst6,conf->value->err)));
            							}
            							else {
HXLINE( 277)								bool _hx_tmp7;
HXDLIN( 277)								if (hx::IsNotNull( kFirst )) {
HXLINE( 277)									_hx_tmp7 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_ALT",fc,3c,cf,99));
            								}
            								else {
HXLINE( 277)									_hx_tmp7 = false;
            								}
HXDLIN( 277)								if (_hx_tmp7) {
HXLINE( 280)									bool _hx_tmp8;
HXDLIN( 280)									if ((conf->value->type == HX_("FAIL",de,81,76,2e))) {
HXLINE( 280)										_hx_tmp8 = (es->get_length() > (int)0);
            									}
            									else {
HXLINE( 280)										_hx_tmp8 = false;
            									}
HXDLIN( 280)									if (_hx_tmp8) {
HXLINE( 282)										 ::Dynamic _hx_tmp9 = ::org::waxeye::parser::Util_obj::first(es);
HXDLIN( 282)										int kFirst7 = ( (int)(kFirst->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) );
HXDLIN( 282)										::Array< ::Dynamic> kFirst8 = ( (::Array< ::Dynamic>)(kFirst->__Field(HX_("asts",f1,5a,75,40),hx::paccDynamic)) );
HXDLIN( 282)										 ::org::waxeye::parser::RawError _hx_tmp10 = hx::TCast<  ::org::waxeye::parser::RawError >::cast(conf->value->err);
HXDLIN( 282)										 ::Dynamic value = ::org::waxeye::parser::Util_obj::rest(es);
HXDLIN( 282)										this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(_hx_tmp9) ),kFirst7,kFirst8,_hx_tmp10,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_ALT(( (::Array< ::Dynamic>)(value) ),( (int)(kFirst->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ),( (::Array< ::Dynamic>)(kFirst->__Field(HX_("asts",f1,5a,75,40),hx::paccDynamic)) )),kRest)) )));
            									}
            									else {
HXLINE( 287)										this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),conf->value));
            									}
            								}
            								else {
HXLINE( 291)									bool _hx_tmp11;
HXDLIN( 291)									if (hx::IsNotNull( kFirst )) {
HXLINE( 291)										_hx_tmp11 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_OPT",06,e0,d9,99));
            									}
            									else {
HXLINE( 291)										_hx_tmp11 = false;
            									}
HXDLIN( 291)									if (_hx_tmp11) {
HXLINE( 293)										this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),conf->value));
            									}
            									else {
HXLINE( 296)										bool _hx_tmp12;
HXDLIN( 296)										if (hx::IsNotNull( kFirst )) {
HXLINE( 296)											_hx_tmp12 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_AND",aa,3e,cf,99));
            										}
            										else {
HXLINE( 296)											_hx_tmp12 = false;
            										}
HXDLIN( 296)										if (_hx_tmp12) {
HXLINE( 298)											this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(( (int)(kFirst->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)) ),( (::Array< ::Dynamic>)(kFirst->__Field(HX_("asts",f1,5a,75,40),hx::paccDynamic)) ), ::Dynamic(kFirst->__Field(HX_("err",65,07,4d,00),hx::paccDynamic)))));
            										}
            										else {
HXLINE( 301)											bool _hx_tmp13;
HXDLIN( 301)											if (hx::IsNotNull( kFirst )) {
HXLINE( 301)												_hx_tmp13 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_NOT",e6,1c,d9,99));
            											}
            											else {
HXLINE( 301)												_hx_tmp13 = false;
            											}
HXDLIN( 301)											if (_hx_tmp13) {
HXLINE( 303)												this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::FAIL( ::Dynamic(kFirst->__Field(HX_("err",65,07,4d,00),hx::paccDynamic)))));
            											}
            											else {
HXLINE( 306)												bool _hx_tmp14;
HXDLIN( 306)												if (hx::IsNotNull( kFirst )) {
HXLINE( 306)													_hx_tmp14 = (( (::String)(kFirst->__Field(HX_("type",ba,f2,08,4d),hx::paccDynamic)) ) == HX_("CONT_NT",b3,1b,5f,99));
            												}
            												else {
HXLINE( 306)													_hx_tmp14 = false;
            												}
HXDLIN( 306)												if (_hx_tmp14) {
HXLINE( 308)													::String mode = ( (::String)(kFirst->__Field(HX_("mode",63,d3,60,48),hx::paccDynamic)) );
HXLINE( 309)													 ::Dynamic name =  ::Dynamic(kFirst->__Field(HX_("name",4b,72,ff,48),hx::paccDynamic));
HXLINE( 310)													::Array< ::Dynamic> asts1 = ( (::Array< ::Dynamic>)(kFirst->__Field(HX_("asts",f1,5a,75,40),hx::paccDynamic)) );
HXLINE( 311)													 ::Dynamic nt =  ::Dynamic(kFirst->__Field(HX_("nt",46,60,00,00),hx::paccDynamic));
HXLINE( 313)													 ::org::waxeye::parser::Value value1 = conf->value;
HXLINE( 314)													::Array< ::Dynamic> valAsts = value1->asts;
HXLINE( 315)													int errPos = hx::TCast<  ::org::waxeye::parser::RawError >::cast(value1->err)->pos;
HXLINE( 316)													::cpp::VirtualArray errNts = hx::TCast<  ::org::waxeye::parser::RawError >::cast(value1->err)->nonterminals;
HXLINE( 317)													::cpp::VirtualArray errCcs = hx::TCast<  ::org::waxeye::parser::RawError >::cast(value1->err)->failedChars;
HXLINE( 319)													 ::org::waxeye::parser::RawError newErr =  ::org::waxeye::parser::RawError_obj::__alloc( HX_CTX ,errPos,errNts,errCcs,nt);
HXLINE( 321)													::String _hx_switch_1 = mode;
            													if (  (_hx_switch_1==HX_("NORMAL",27,1e,ec,e2)) ){
HXLINE( 324)														valAsts->reverse();
HXLINE( 325)														int value2 = value1->pos;
HXDLIN( 325)														this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(value2,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::AST_obj::TREE(name,valAsts),asts1)) ),newErr)));
HXLINE( 323)														goto _hx_goto_5;
            													}
            													if (  (_hx_switch_1==HX_("PRUNING",c7,4e,ce,ec)) ){
HXLINE( 329)														if ((valAsts->length == (int)0)) {
HXLINE( 331)															this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(value1->pos,asts1,newErr)));
            														}
            														else {
HXLINE( 334)															if ((valAsts->length == (int)1)) {
HXLINE( 336)																int value3 = value1->pos;
HXDLIN( 336)																this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(value3,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Util_obj::first(valAsts),asts1)) ),newErr)));
            															}
            															else {
HXLINE( 340)																valAsts->reverse();
HXLINE( 341)																int value4 = value1->pos;
HXDLIN( 341)																this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(value4,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::AST_obj::TREE(name,valAsts),asts1)) ),newErr)));
            															}
            														}
HXLINE( 329)														goto _hx_goto_5;
            													}
            													if (  (_hx_switch_1==HX_("VOIDING",ee,e9,d1,c3)) ){
HXLINE( 346)														this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(( (::Array< ::Dynamic>)(kRest) ),::org::waxeye::parser::Value_obj::VAL(value1->pos,asts1,newErr)));
HXDLIN( 346)														goto _hx_goto_5;
            													}
            													_hx_goto_5:;
            												}
            												else {
HXLINE( 351)													if (hx::IsNotNull( kFirst )) {
HXLINE( 353)														HX_STACK_DO_THROW(HX_("unsupported 4",09,c0,e4,e0));
            													}
            													else {
HXLINE( 355)														if ((conf->value->type == HX_("VAL",c1,7a,41,00))) {
HXLINE( 357)															::Array< ::Dynamic> ts = conf->value->asts;
HXLINE( 359)															if (this->eof(conf->value->pos)) {
HXLINE( 361)																if (hx::IsEq(  ::Dynamic(::Reflect_obj::field(this->env,this->start)->__Field(HX_("mode",63,d3,60,48),hx::paccDynamic)),HX_("NORMAL",27,1e,ec,e2) )) {
HXLINE( 363)																	ts->reverse();
HXLINE( 364)																	this->state = ::org::waxeye::parser::MachineState_obj::FINAL(::org::waxeye::parser::AST_obj::TREE(this->start,ts));
            																}
            																else {
HXLINE( 367)																	if (hx::IsEq(  ::Dynamic(::Reflect_obj::field(this->env,this->start)->__Field(HX_("mode",63,d3,60,48),hx::paccDynamic)),HX_("PRUNING",c7,4e,ce,ec) )) {
HXLINE( 370)																		if ((ts->length == (int)0)) {
HXLINE( 372)																			this->state = ::org::waxeye::parser::MachineState_obj::FINAL(::org::waxeye::parser::AST_obj::EMPTY());
            																		}
            																		else {
HXLINE( 375)																			if ((ts->length == (int)1)) {
HXLINE( 377)																				this->state = ::org::waxeye::parser::MachineState_obj::FINAL(::org::waxeye::parser::Util_obj::first(ts));
            																			}
            																			else {
HXLINE( 382)																				ts->reverse();
HXLINE( 383)																				this->state = ::org::waxeye::parser::MachineState_obj::FINAL(::org::waxeye::parser::AST_obj::TREE(this->start,ts));
            																			}
            																		}
            																	}
            																	else {
HXLINE( 389)																		this->state = ::org::waxeye::parser::MachineState_obj::FINAL(::org::waxeye::parser::AST_obj::EMPTY());
            																	}
            																}
            															}
            															else {
HXLINE( 392)																bool _hx_tmp15;
HXDLIN( 392)																if (hx::IsNotNull( hx::TCast<  ::org::waxeye::parser::RawError >::cast(conf->value->err) )) {
HXLINE( 392)																	int conf6 = conf->value->pos;
HXDLIN( 392)																	_hx_tmp15 = (conf6 == hx::TCast<  ::org::waxeye::parser::RawError >::cast(conf->value->err)->pos);
            																}
            																else {
HXLINE( 392)																	_hx_tmp15 = false;
            																}
HXDLIN( 392)																if (_hx_tmp15) {
HXLINE( 394)																	 ::org::waxeye::parser::RawError err1 = ( ( ::org::waxeye::parser::RawError)(conf->value->err) );
HXLINE( 395)																	this->state = ::org::waxeye::parser::MachineState_obj::FINAL( ::org::waxeye::parser::RawError_obj::__alloc( HX_CTX ,conf->value->pos,err1->nonterminals,err1->failedChars,null())->toParseError(this->input));
            																}
            																else {
HXLINE( 400)																	this->state = ::org::waxeye::parser::MachineState_obj::FINAL( ::org::waxeye::parser::RawError_obj::__alloc( HX_CTX ,conf->value->pos,::cpp::VirtualArray_obj::__new(0),::cpp::VirtualArray_obj::__new(0),null())->toParseError(this->input));
            																}
            															}
            														}
            														else {
HXLINE( 404)															if ((conf->value->type == HX_("FAIL",de,81,76,2e))) {
HXLINE( 406)																this->state = ::org::waxeye::parser::MachineState_obj::FINAL(hx::TCast<  ::org::waxeye::parser::RawError >::cast(conf->value->err)->toParseError(this->input));
            															}
            															else {
HXLINE( 411)																HX_STACK_DO_THROW(HX_("unsupported 3",08,c0,e4,e0));
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXLINE( 215)				goto _hx_goto_4;
            			}
            			if (  (_hx_switch_0==HX_("EVAL",9c,33,dd,2d)) ){
HXLINE( 100)				::String _g1 = exp->type;
HXDLIN( 100)				::String _hx_switch_2 = _g1;
            				if (  (_hx_switch_2==HX_("ALT",09,95,31,00)) ){
HXLINE( 118)					es = exp->args;
HXLINE( 119)					if ((es->get_length() > (int)0)) {
HXLINE( 121)						 ::Dynamic _hx_tmp16 = ::org::waxeye::parser::Util_obj::first(es);
HXDLIN( 121)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(_hx_tmp16) ),pos,asts,err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_ALT(( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::rest(es)) ),pos,asts),k)) )));
            					}
            					else {
HXLINE( 125)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,( ( ::org::waxeye::parser::Value)(err) )));
            					}
HXLINE( 117)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("AND",b7,96,31,00)) ){
HXLINE( 131)					 ::Dynamic exp1 = exp->args->__get((int)0);
HXDLIN( 131)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(exp1) ),pos,::Array_obj< ::Dynamic>::__new(0),err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_AND(pos,asts,err),k)) )));
HXDLIN( 131)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("ANY",cc,96,31,00)) ){
HXLINE( 105)					if (this->eof(pos)) {
HXLINE( 107)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,::org::waxeye::parser::Value_obj::FAIL(::org::waxeye::parser::Util_obj::updateError(( ( ::org::waxeye::parser::RawError)(err) ),pos, ::org::waxeye::parser::ErrAny_obj::__alloc( HX_CTX )))));
            					}
            					else {
HXLINE( 111)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,::org::waxeye::parser::Value_obj::VAL((pos + (int)1),( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(this->input.charAt(pos),asts)) ),err)));
            					}
HXLINE( 105)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("CHAR",d6,26,80,2c)) ){
HXLINE( 146)					::String c = ( (::String)(exp->args->__get((int)0)) );
HXLINE( 147)					 ::org::waxeye::parser::Value newval;
HXLINE( 148)					bool _hx_tmp17;
HXDLIN( 148)					if (!(this->eof(pos))) {
HXLINE( 148)						_hx_tmp17 = (c != this->input.charAt(pos));
            					}
            					else {
HXLINE( 148)						_hx_tmp17 = true;
            					}
HXDLIN( 148)					if (_hx_tmp17) {
HXLINE( 150)						newval = ::org::waxeye::parser::Value_obj::FAIL(::org::waxeye::parser::Util_obj::updateError(( ( ::org::waxeye::parser::RawError)(err) ),pos, ::org::waxeye::parser::ErrChar_obj::__alloc( HX_CTX ,c)));
            					}
            					else {
HXLINE( 153)						newval = ::org::waxeye::parser::Value_obj::VAL((pos + (int)1),( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(this->input.charAt(pos),asts)) ),err);
            					}
HXLINE( 155)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,newval));
HXLINE( 145)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("CHAR_CLASS",af,e2,3f,41)) ){
HXLINE( 160)					::cpp::VirtualArray cc = exp->args;
HXLINE( 162)					if (this->eof(pos)) {
HXLINE( 164)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,::org::waxeye::parser::Value_obj::FAIL(::org::waxeye::parser::Util_obj::updateError(( ( ::org::waxeye::parser::RawError)(err) ),pos, ::org::waxeye::parser::ErrCC_obj::__alloc( HX_CTX ,cc)))));
            					}
            					else {
HXLINE( 168)						this->state = this->visit(cc,k,( ( ::org::waxeye::parser::RawError)(err) ),pos,cc,asts);
            					}
HXLINE( 159)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("NOT",f3,74,3b,00)) ){
HXLINE( 136)					 ::Dynamic exp2 = exp->args->__get((int)0);
HXDLIN( 136)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(exp2) ),pos,::Array_obj< ::Dynamic>::__new(0),err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_NOT(pos,asts,err),k)) )));
HXDLIN( 136)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("NT",46,44,00,00)) ){
HXLINE( 200)					::String name1 = ( (::String)(exp->args->__get((int)0)) );
HXLINE( 201)					::String mode1 = ( (::String)(::Reflect_obj::field(this->env,name1)->__Field(HX_("mode",63,d3,60,48),hx::paccDynamic)) );
HXLINE( 202)					 ::org::waxeye::parser::Exp e = ( ( ::org::waxeye::parser::Exp)(::Reflect_obj::field(this->env,name1)->__Field(HX_("exp",9d,0c,4d,00),hx::paccDynamic)) );
HXLINE( 203)					 ::org::waxeye::parser::RawError err2 =  ::org::waxeye::parser::RawError_obj::__alloc( HX_CTX , ::Dynamic(err->__Field(HX_("pos",94,5d,55,00),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("nonterminals",ca,48,83,be),hx::paccDynamic)), ::Dynamic(err->__Field(HX_("failedChars",e0,59,ab,17),hx::paccDynamic)),name1);
HXLINE( 205)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(e,pos,::Array_obj< ::Dynamic>::__new(0),err2,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_NT(mode1,name1,asts, ::Dynamic(conf->err->__Field(HX_("currentNT",bf,20,2e,41),hx::paccDynamic))),k)) )));
HXLINE( 199)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("OPT",13,38,3c,00)) ){
HXLINE( 196)					 ::Dynamic exp3 = exp->args->__get((int)0);
HXDLIN( 196)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(exp3) ),pos,asts,err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_OPT(pos,asts),k)) )));
HXDLIN( 196)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("PLUS",5a,07,1b,35)) ){
HXLINE( 188)					 ::Dynamic exp4 = exp->args->__get((int)0);
HXDLIN( 188)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(exp4) ),pos,asts,err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_PLUS(exp->args->__get((int)0)),k)) )));
HXDLIN( 188)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("SEQ",7f,37,3f,00)) ){
HXLINE( 177)					::cpp::VirtualArray exprs = exp->args;
HXLINE( 178)					if (hx::IsNull( exprs )) {
HXLINE( 180)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,::org::waxeye::parser::Value_obj::VAL(pos,asts,err)));
            					}
            					else {
HXLINE( 183)						 ::Dynamic _hx_tmp18 = ::org::waxeye::parser::Util_obj::first(exprs);
HXDLIN( 183)						this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(_hx_tmp18) ),pos,asts,err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_SEQ(( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::rest(exprs)) )),k)) )));
            					}
HXLINE( 171)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("STAR",d2,ab,1c,37)) ){
HXLINE( 192)					 ::Dynamic exp5 = exp->args->__get((int)0);
HXDLIN( 192)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(exp5) ),pos,asts,err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_STAR(exp->args->__get((int)0),pos,asts),k)) )));
HXDLIN( 192)					goto _hx_goto_6;
            				}
            				if (  (_hx_switch_2==HX_("VOID",54,8b,14,39)) ){
HXLINE( 141)					 ::Dynamic exp6 = exp->args->__get((int)0);
HXDLIN( 141)					this->state = ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::EVAL(( ( ::org::waxeye::parser::Exp)(exp6) ),pos,::Array_obj< ::Dynamic>::__new(0),err,( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(::org::waxeye::parser::Continuations_obj::CONT_VOID(asts),k)) )));
HXDLIN( 141)					goto _hx_goto_6;
            				}
            				/* default */{
HXLINE( 208)					HX_STACK_DO_THROW(HX_("unsupported 2",07,c0,e4,e0));
            				}
            				_hx_goto_6:;
HXLINE( 100)				goto _hx_goto_4;
            			}
            			/* default */{
            			}
            			_hx_goto_4:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,move,(void))

 ::org::waxeye::parser::MachineState Parser_obj::visit( ::Dynamic charClasses,::Array< ::Dynamic> k, ::org::waxeye::parser::RawError err,int pos,::cpp::VirtualArray cc, ::Dynamic asts){
            	HX_GC_STACKFRAME(&_hx_pos_5b080e019e7c5b0a_422_visit)
HXLINE( 423)		::String c1 = null();
HXLINE( 424)		::String c2 = null();
HXLINE( 426)		if (hx::IsEq(  ::Dynamic(charClasses->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)),(int)0 )) {
HXLINE( 428)			return ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,::org::waxeye::parser::Value_obj::FAIL(::org::waxeye::parser::Util_obj::updateError(err,pos, ::org::waxeye::parser::ErrCC_obj::__alloc( HX_CTX ,cc)))));
            		}
            		else {
HXLINE( 432)			if (::Std_obj::is(::org::waxeye::parser::Util_obj::first(( (::cpp::VirtualArray)(charClasses) )),hx::ArrayBase::__mClass)) {
HXLINE( 434)				c1 = ( (::String)(::org::waxeye::parser::Util_obj::first(( (::cpp::VirtualArray)(charClasses) ))->__GetItem((int)0)) );
HXLINE( 435)				c2 = ( (::String)(::org::waxeye::parser::Util_obj::first(( (::cpp::VirtualArray)(charClasses) ))->__GetItem((int)1)) );
            			}
            			else {
HXLINE( 439)				c2 = ( (::String)(::org::waxeye::parser::Util_obj::first(( (::cpp::VirtualArray)(charClasses) ))) );
HXDLIN( 439)				c1 = c2;
            			}
            		}
HXLINE( 443)		bool _hx_tmp;
HXDLIN( 443)		if ((c1 <= this->input.charAt(pos))) {
HXLINE( 443)			_hx_tmp = (c2 >= this->input.charAt(pos));
            		}
            		else {
HXLINE( 443)			_hx_tmp = false;
            		}
HXDLIN( 443)		if (_hx_tmp) {
HXLINE( 445)			return ::org::waxeye::parser::MachineState_obj::INTER(::org::waxeye::parser::MachineConfiguration_obj::APPLY(k,::org::waxeye::parser::Value_obj::VAL((pos + (int)1),( (::Array< ::Dynamic>)(::org::waxeye::parser::Util_obj::arrayPrepend(this->input.charAt(pos),asts)) ),err)));
            		}
HXLINE( 448)		return this->visit(::org::waxeye::parser::Util_obj::rest(( (::cpp::VirtualArray)(charClasses) )),k,err,pos,cc,asts);
            	}


HX_DEFINE_DYNAMIC_FUNC6(Parser_obj,visit,return )

 ::Dynamic Parser_obj::parse(::String input){
            	HX_STACKFRAME(&_hx_pos_5b080e019e7c5b0a_454_parse)
HXDLIN( 454)		return this->match(this->start,input);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Parser_obj,parse,return )


hx::ObjectPtr< Parser_obj > Parser_obj::__new( ::Dynamic env,::String __o_start) {
	hx::ObjectPtr< Parser_obj > __this = new Parser_obj();
	__this->__construct(env,__o_start);
	return __this;
}

hx::ObjectPtr< Parser_obj > Parser_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic env,::String __o_start) {
	Parser_obj *__this = (Parser_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Parser_obj), true, "org.waxeye.parser.Parser"));
	*(void **)__this = Parser_obj::_hx_vtable;
	__this->__construct(env,__o_start);
	return __this;
}

Parser_obj::Parser_obj()
{
}

void Parser_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Parser);
	HX_MARK_MEMBER_NAME(env,"env");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(inputLen,"inputLen");
	HX_MARK_MEMBER_NAME(input,"input");
	HX_MARK_MEMBER_NAME(nt,"nt");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_END_CLASS();
}

void Parser_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(env,"env");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(inputLen,"inputLen");
	HX_VISIT_MEMBER_NAME(input,"input");
	HX_VISIT_MEMBER_NAME(nt,"nt");
	HX_VISIT_MEMBER_NAME(state,"state");
}

hx::Val Parser_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nt") ) { return hx::Val( nt ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"env") ) { return hx::Val( env ); }
		if (HX_FIELD_EQ(inName,"eof") ) { return hx::Val( eof_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return hx::Val( move_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"input") ) { return hx::Val( input ); }
		if (HX_FIELD_EQ(inName,"state") ) { return hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"match") ) { return hx::Val( match_dyn() ); }
		if (HX_FIELD_EQ(inName,"visit") ) { return hx::Val( visit_dyn() ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return hx::Val( parse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"inputLen") ) { return hx::Val( inputLen ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val Parser_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"nt") ) { nt=inValue.Cast< ::String >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"env") ) { env=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"input") ) { input=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast<  ::org::waxeye::parser::MachineState >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"inputLen") ) { inputLen=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Parser_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_HCSTRING("env","\xed","\x03","\x4d","\x00"));
	outFields->push(HX_HCSTRING("start","\x62","\x74","\x0b","\x84"));
	outFields->push(HX_HCSTRING("inputLen","\xeb","\xe1","\xaa","\xc6"));
	outFields->push(HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"));
	outFields->push(HX_HCSTRING("nt","\x46","\x60","\x00","\x00"));
	outFields->push(HX_HCSTRING("state","\x11","\x76","\x0b","\x84"));
	super::__GetFields(outFields);
};

#if HXCPP_SCRIPTABLE
static hx::StorageInfo Parser_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*Dynamic*/ ,(int)offsetof(Parser_obj,env),HX_HCSTRING("env","\xed","\x03","\x4d","\x00")},
	{hx::fsString,(int)offsetof(Parser_obj,start),HX_HCSTRING("start","\x62","\x74","\x0b","\x84")},
	{hx::fsInt,(int)offsetof(Parser_obj,inputLen),HX_HCSTRING("inputLen","\xeb","\xe1","\xaa","\xc6")},
	{hx::fsString,(int)offsetof(Parser_obj,input),HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe")},
	{hx::fsString,(int)offsetof(Parser_obj,nt),HX_HCSTRING("nt","\x46","\x60","\x00","\x00")},
	{hx::fsObject /*::org::waxeye::parser::MachineState*/ ,(int)offsetof(Parser_obj,state),HX_HCSTRING("state","\x11","\x76","\x0b","\x84")},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *Parser_obj_sStaticStorageInfo = 0;
#endif

static ::String Parser_obj_sMemberFields[] = {
	HX_HCSTRING("env","\xed","\x03","\x4d","\x00"),
	HX_HCSTRING("start","\x62","\x74","\x0b","\x84"),
	HX_HCSTRING("inputLen","\xeb","\xe1","\xaa","\xc6"),
	HX_HCSTRING("input","\x0a","\xc4","\x1d","\xbe"),
	HX_HCSTRING("nt","\x46","\x60","\x00","\x00"),
	HX_HCSTRING("state","\x11","\x76","\x0b","\x84"),
	HX_HCSTRING("match","\x45","\x49","\x23","\x03"),
	HX_HCSTRING("eof","\xbc","\x04","\x4d","\x00"),
	HX_HCSTRING("move","\x11","\xe3","\x60","\x48"),
	HX_HCSTRING("visit","\xcb","\x79","\x07","\x37"),
	HX_HCSTRING("parse","\x33","\x90","\x55","\xbd"),
	::String(null()) };

static void Parser_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Parser_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Parser_obj::__mClass,"__mClass");
};

#endif

hx::Class Parser_obj::__mClass;

void Parser_obj::__register()
{
	hx::Object *dummy = new Parser_obj;
	Parser_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("org.waxeye.parser.Parser","\xcd","\x16","\x31","\x60");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = Parser_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(Parser_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< Parser_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Parser_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Parser_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Parser_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace org
} // end namespace waxeye
} // end namespace parser
