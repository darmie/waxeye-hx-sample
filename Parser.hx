/*
 * Generated by the Waxeye Parser Generator - version 0.8.1
 * www.waxeye.org
 */
package;

import org.waxeye.parser.*;
import org.waxeye.parser.Exp.ExpType;
import org.waxeye.parser.Modes;
//import haxe.ds.StringMap;
/**
 * A parser generated by the Waxeye Parser Generator.
 *
 * @author Waxeye Parser Generator
 */
class Parser extends org.waxeye.parser.Parser
{
    /**
     * Creates a new Parser.
     */
    public function new()
    {
        super(makeDefinition(), 'calc');
    }

    /**
     * Builds the grammar definitions for the parser.
     *
     * @return The definitions grammar for the parser.
     */
    private function makeDefinition():Dynamic
    {
        var def:Dynamic = {calc : {'mode' : Modes.NORMAL, 'exp' : new Exp(ExpType.SEQ, [new Exp(ExpType.NT, ['ws']),
                new Exp(ExpType.NT, ['sum'])]) },
            sum : {'mode' : Modes.NORMAL, 'exp' : new Exp(ExpType.SEQ, [new Exp(ExpType.NT, ['prod']),
                new Exp(ExpType.STAR, [new Exp(ExpType.SEQ, [new Exp(ExpType.CHAR_CLASS, ['+',
                            '-']),
                        new Exp(ExpType.NT, ['ws']),
                        new Exp(ExpType.NT, ['prod'])])])]) },
            prod : {'mode' : Modes.NORMAL, 'exp' : new Exp(ExpType.SEQ, [new Exp(ExpType.NT, ['unary']),
                new Exp(ExpType.STAR, [new Exp(ExpType.SEQ, [new Exp(ExpType.CHAR_CLASS, ['*',
                            '/']),
                        new Exp(ExpType.NT, ['ws']),
                        new Exp(ExpType.NT, ['unary'])])])]) },
            unary : {'mode' : Modes.PRUNING, 'exp' : new Exp(ExpType.ALT, [new Exp(ExpType.SEQ, [new Exp(ExpType.CHAR, ['-']),
                    new Exp(ExpType.NT, ['ws']),
                    new Exp(ExpType.NT, ['unary'])]),
                new Exp(ExpType.SEQ, [new Exp(ExpType.VOID, [new Exp(ExpType.CHAR, ['('])]),
                    new Exp(ExpType.NT, ['ws']),
                    new Exp(ExpType.NT, ['sum']),
                    new Exp(ExpType.VOID, [new Exp(ExpType.CHAR, [')'])]),
                    new Exp(ExpType.NT, ['ws'])]),
                new Exp(ExpType.NT, ['num'])]) },
            num : {'mode' : Modes.NORMAL, 'exp' : new Exp(ExpType.SEQ, [new Exp(ExpType.PLUS, [new Exp(ExpType.CHAR_CLASS, [['0', '9']])]),
                new Exp(ExpType.OPT, [new Exp(ExpType.SEQ, [new Exp(ExpType.CHAR, ['.']),
                        new Exp(ExpType.PLUS, [new Exp(ExpType.CHAR_CLASS, [['0', '9']])])])]),
                new Exp(ExpType.NT, ['ws'])]) },
            ws : {'mode' : Modes.VOIDING, 'exp' : new Exp(ExpType.STAR, [new Exp(ExpType.CHAR_CLASS, [['\t', '\n'],
                    '\r',
                    ' '])]) }}

        return def;
    }
    
}
